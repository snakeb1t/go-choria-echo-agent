// Code generated by MockGen. DO NOT EDIT.
// Source: server/agent_providers.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	choria "github.com/choria-io/go-choria/choria"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// MockAgentProvider is a mock of AgentProvider interface
type MockAgentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAgentProviderMockRecorder
}

// MockAgentProviderMockRecorder is the mock recorder for MockAgentProvider
type MockAgentProviderMockRecorder struct {
	mock *MockAgentProvider
}

// NewMockAgentProvider creates a new mock instance
func NewMockAgentProvider(ctrl *gomock.Controller) *MockAgentProvider {
	mock := &MockAgentProvider{ctrl: ctrl}
	mock.recorder = &MockAgentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentProvider) EXPECT() *MockAgentProviderMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockAgentProvider) Initialize(fw *choria.Framework, log *logrus.Entry) {
	m.ctrl.Call(m, "Initialize", fw, log)
}

// Initialize indicates an expected call of Initialize
func (mr *MockAgentProviderMockRecorder) Initialize(fw, log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockAgentProvider)(nil).Initialize), fw, log)
}

// RegisterAgents mocks base method
func (m *MockAgentProvider) RegisterAgents(ctx context.Context, mgr AgentManager, connector choria.InstanceConnector, log *logrus.Entry) error {
	ret := m.ctrl.Call(m, "RegisterAgents", ctx, mgr, connector, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAgents indicates an expected call of RegisterAgents
func (mr *MockAgentProviderMockRecorder) RegisterAgents(ctx, mgr, connector, log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgents", reflect.TypeOf((*MockAgentProvider)(nil).RegisterAgents), ctx, mgr, connector, log)
}

// Version mocks base method
func (m *MockAgentProvider) Version() string {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockAgentProviderMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockAgentProvider)(nil).Version))
}
