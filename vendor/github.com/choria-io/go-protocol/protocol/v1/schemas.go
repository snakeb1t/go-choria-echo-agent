package v1

//go:generate go run schema/gen.go -- $GOFILE

import (
	"encoding/base64"
	"fmt"

	"github.com/xeipuuv/gojsonschema"
)

type jsonSchemas struct {
	ReplyV1         []byte
	RequestV1       []byte
	SecureReplyV1   []byte
	SecureRequestV1 []byte
	TransportV1     []byte
}

var schemas jsonSchemas

func (s *jsonSchemas) Validate(schema []byte, data string) (result bool, errors []string, err error) {
	js := gojsonschema.NewStringLoader(string(schema))
	d := gojsonschema.NewStringLoader(data)

	validation, err := gojsonschema.Validate(js, d)
	if err != nil {
		badJsonCtr.Inc()
		protocolErrorCtr.Inc()
		err = fmt.Errorf("Could not validate incoming document: %s", err)
		return
	}

	if !validation.Valid() {
		protocolErrorCtr.Inc()
		invalidCtr.Inc()
		for _, desc := range validation.Errors() {
			errors = append(errors, desc.String())
		}

		return
	}

	result = true

	return
}

func init() {
	// generated using gen.go at 2018-07-31 15:22:15.925492948 +0200 CEST m=+0.001125040
	schemas = jsonSchemas{}

	schemas.ReplyV1, _ = base64.StdEncoding.DecodeString(`ewogICAgIiRzY2hlbWEiOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLAogICAgImRlc2NyaXB0aW9uIjogIkNob3JpYSBSZXBseSB2ZXJzaW9uIDEiLAogICAgInRpdGxlIjogIlJlcGx5VjEiLAogICAgInR5cGUiOiJvYmplY3QiLAogICAgInJlcXVpcmVkIjpbCiAgICAgICAgInByb3RvY29sIiwKICAgICAgICAibWVzc2FnZSIsCiAgICAgICAgImVudmVsb3BlIgogICAgXSwKICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJwcm90b2NvbCI6IHsKICAgICAgICAgICAgInR5cGUiOiJzdHJpbmciLAogICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICJjaG9yaWE6cmVwbHk6MSIKICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgIm1lc3NhZ2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjoic3RyaW5nIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBkYXRhIGJlaW5nIHNlbnQgdG8gdGhlIEFnZW50LCBzaG91bGQgYWxyZWFkeSBiZSBKU09OIGVuY29kZWQuIiwKICAgICAgICAgICAgIm1pbkxlbmd0aCI6MQogICAgICAgIH0sCiAgICAgICAgImVudmVsb3BlIjogewogICAgICAgICAgICAidHlwZSI6Im9iamVjdCIsCiAgICAgICAgICAgICJyZXF1aXJlZCI6WwogICAgICAgICAgICAgICAgInJlcXVlc3RpZCIsCiAgICAgICAgICAgICAgICAic2VuZGVyaWQiLAogICAgICAgICAgICAgICAgImFnZW50IiwKICAgICAgICAgICAgICAgICJ0aW1lIgogICAgICAgICAgICBdLAogICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJyZXF1ZXN0aWQiOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJHbG9iYWxseSB1bmlxdWUgUmVxdWVzdCBJRCIsCiAgICAgICAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDMyLAogICAgICAgICAgICAgICAgICAgICJtYXhMZW5ndGgiOiAzMgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzZW5kZXJpZCI6IHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaWRlbnRpdHkgb2YgdGhlIG1hY2hpbmUgdGhhdCBzZW50IHRoaXMgbWVzc2FnZSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiYWdlbnQiOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgYWdlbnQgb24gdGhlIHNlcnZlciB0aGF0IHNlbnQgdGhpcyBtZXNzYWdlIiwKICAgICAgICAgICAgICAgICAgICAibWluTGVuZ3RoIjogMQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ0aW1lIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjoiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlVuaXggdGltZSBzdGFtcCBvZiBVVEMgdGltZSB3aGVuIHRoZSByZXBseSB3YXMgbWFkZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==`)
	schemas.RequestV1, _ = base64.StdEncoding.DecodeString(``)
	schemas.SecureReplyV1, _ = base64.StdEncoding.DecodeString(`ewogICAgIiRzY2hlbWEiOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLAogICAgImRlc2NyaXB0aW9uIjogIkNob3JpYSBTZWN1cmUgUmVwbHkgdmVyc2lvbiAxIiwKICAgICJ0aXRsZSI6IlNlY3VyZVJlcGx5VjEiLAogICAgInR5cGUiOiJvYmplY3QiLAogICAgInJlcXVpcmVkIjpbCiAgICAgICAgInByb3RvY29sIiwKICAgICAgICAibWVzc2FnZSIsCiAgICAgICAgImhhc2giCiAgICBdLAogICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICJwcm90b2NvbCI6IHsKICAgICAgICAgICAgICJ0eXBlIjoic3RyaW5nIiwKICAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgICJjaG9yaWE6c2VjdXJlOnJlcGx5OjEiCiAgICAgICAgICAgICBdCiAgICAgICAgIH0sCiAgICAgICAgICJtZXNzYWdlIjogewogICAgICAgICAgICAgInR5cGUiOiJzdHJpbmciLAogICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkJhc2U2NCBlbmNvZGVkIEpTT04gdmVyc2lvbiBvZiBhIFJlcGx5VjEiLAogICAgICAgICAgICAgIm1pbkxlbmd0aCI6MQogICAgICAgICB9LAogICAgICAgICAiaGFzaCI6IHsKICAgICAgICAgICAgICJ0eXBlIjoic3RyaW5nIiwKICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJCYXNlIDY0IGVuY29kZWQgU0hBMjU2IGhhc2ggb2YgdGhlIE1lc3NhZ2UiLAogICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICAgfQogICAgfQp9`)
	schemas.SecureRequestV1, _ = base64.StdEncoding.DecodeString(`ewogICAgIiRzY2hlbWEiOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLAogICAgImRlc2NyaXB0aW9uIjogIkNob3JpYSBTZWN1cmUgUmVxdWVzdCB2ZXJzaW9uIDEiLAogICAgInRpdGxlIjoiU2VjdXJlUmVxdWVzdFYxIiwKICAgICJ0eXBlIjoib2JqZWN0IiwKICAgICJyZXF1aXJlZCI6WwogICAgICAgICJwcm90b2NvbCIsCiAgICAgICAgIm1lc3NhZ2UiLAogICAgICAgICJzaWduYXR1cmUiLAogICAgICAgICJwdWJjZXJ0IgogICAgXSwKICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAicHJvdG9jb2wiOiB7CiAgICAgICAgICAgICAidHlwZSI6InN0cmluZyIsCiAgICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICAiY2hvcmlhOnNlY3VyZTpyZXF1ZXN0OjEiCiAgICAgICAgICAgICBdCiAgICAgICAgIH0sCiAgICAgICAgICJtZXNzYWdlIjogewogICAgICAgICAgICAgInR5cGUiOiJzdHJpbmciLAogICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkJhc2U2NCBlbmNvZGVkIEpTT04gdmVyc2lvbiBvZiBhIFJlcXVlc3RWMSIsCiAgICAgICAgICAgICAibWluTGVuZ3RoIjoxCiAgICAgICAgIH0sCiAgICAgICAgICJzaWduYXR1cmUiOiB7CiAgICAgICAgICAgICAidHlwZSI6InN0cmluZyIsCiAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQmFzZSA2NCBlbmNvZGVkIFNIQTI1NiBQS0NTMXYxNSBzaWduYXR1cmUgbWFkZSB3aXRoIHRoZSB1c2VycyBQcml2YXRlIEtleSIsCiAgICAgICAgICAgICAibWluTGVuZ3RoIjogMQogICAgICAgICB9LAogICAgICAgICAicHViY2VydCI6IHsKICAgICAgICAgICAgICJ0eXBlIjoic3RyaW5nIiwKICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJQRU0gZW5jb2RlZCBQdWJsaWMgQ2VydGlmaWNhdGUgZm9yIHRoZSB1c2VyIHByb2R1Y2luZyB0aGUgbWVzc2FnZSIsCiAgICAgICAgICAgICAibWluTGVuZ3RoIjogMQogICAgICAgICB9CiAgICB9Cn0=`)
	schemas.TransportV1, _ = base64.StdEncoding.DecodeString(`ewogICAgIiRzY2hlbWEiOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjIiwKICAgICJkZXNjcmlwdGlvbiI6ICJDaG9yaWEgVHJhbnNwb3J0IHZlcnNpb24gMSIsCiAgICAidGl0bGUiOiAiVHJhbnNwb3J0VjEiLAogICAgInR5cGUiOiJvYmplY3QiLAogICAgInJlcXVpcmVkIjpbCiAgICAgICAgInByb3RvY29sIiwKICAgICAgICAiZGF0YSIsCiAgICAgICAgImhlYWRlcnMiCiAgICBdLAogICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgInByb3RvY29sIjogewogICAgICAgICAgICAidHlwZSI6InN0cmluZyIsCiAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgImNob3JpYTp0cmFuc3BvcnQ6MSIKICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICJ0eXBlIjoic3RyaW5nIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkJhc2U2NCBlbmNvZGVkIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIFNlY3VyZVJlcXVlc3RWMSBvciBTZWN1cmVSZXBseVYxIgogICAgICAgIH0sCiAgICAgICAgImhlYWRlcnMiOiB7CiAgICAgICAgICAgICJ0eXBlIjoib2JqZWN0IiwKICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAicmVwbHktdG8iOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOQVRTIGRlc3RpbmF0aW9uIHdoZXJlIHJlcGxpZXMgc2hvdWxkIGJlIHNlbnQgaWYgdGhpcyBpcyBhIHJlcXVlc3QiLAogICAgICAgICAgICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm1jX3NlbmRlciI6IHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6InN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjb25maWd1cmVkIGlkZW50aXR5IG9mIHRoZSBzZW5kZXIiLAogICAgICAgICAgICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInNlZW4tYnkiOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRyYWNrcyBub2RlcyB0aGlzIG1lc3NhZ2UgdHJhdmVsbGVkIHRocm91Z2giLAogICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVHJpcGxldCBvZiBmcm9tLCB2aWEgYW5kIHRvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjoic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBpbmNvbWluZyBlbmQgcG9pbnQgLSB0eXBpY2FsbHkgYSBOQVRTIHNlcnZlciBuYW1lLiBCbGFuayBzdHJpbmcgaWYgdGhpcyBpcyB3aGVyZSBhIG1lc3NhZ2Ugc3RhcnRzIGxpa2UgYSByZXF1ZXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6InN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcHJvY2Vzc2luZyBub2RlIC0gdGhlIGlkZW50aXR5IG9mIGEgc2VydmVyLCBjbGllbnQgb3IgYnJva2VyIHByb2Nlc3NpbmcgdGhpcyBtZXNzYWdlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6InN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgb3V0Z29pbmcgZW5kIHBvaW50IC0gdHlwaWNhbGx5IGEgTkFUUyBzZXJ2ZXIgbmFtZS4gQmxhbmsgc3RyaW5nIGlmIHRoaXMgaXMgd2hlcmUgdGhlIG1lc3NhZ2UgZW5kcyBsaWtlIGEgY2xpZW50IHJlY2VpdmluZyBhIHJlcGx5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJmZWRlcmF0aW9uIjogewogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJPcHRpb25hbCBoZWFkZXJzIHNldCB0byBzdXBwb3J0IEZlZGVyYXRpb24uIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6Im9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjpbCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXEiCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInJlcSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjoic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmVxdWVzdCBJRCBvZiB0aGUgY29udGFpbmVkIFNlY3VyZSBSZXF1ZXN0IG9yIFNlY3VyZSBSZXBseS4gIFVzZWQgZm9yIGxvZ2dpbmcgbWFpbmx5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtaW5MZW5ndGgiOiAzMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtYXhMZW5ndGgiOiAzMgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVwbHktdG8iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6InN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVXNlZCBieSBGZWRlcmF0aW9uIHRvIHJlY29yZCB0aGUgb3JpZ2luYWwgcmVwbHktdG8gaGVhZGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0YXJnZXRzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGlzdCBvZiB0YXJnZXRzIHRoZSBtZXNzYWdlIHNob3VsZCBiZSBzZW50IHRvLCB0aGVzZSBhcmUgbWNvbGxlY3RpdmUgaWRlbnRpdGllcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOb2RlIGlkZW50aXRpZXMgdGhpcyBtZXNzYWdlIHNob3VsZCBiZSBkaXNwYXRjaGVkIHRvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9`)
}